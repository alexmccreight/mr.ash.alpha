fit.binseg       <- segment_cp(y))
t.bcp             = system.time(
fit.bcp          <- bcp_cp(y))
t.trendfilter     = system.time(
fit.trendfilter  <- tf_cp(y))
t.susie           = system.time(
fit.susie        <- susie(X = X, Y = y, L = length(nzind), standardize = standardize))
fit.susie$beta    = coef(fit.susie)[-1]
t.lasso           = system.time(
fit.lasso        <- cv.glmnet(x = X, y = y, standardize = standardize))
fit.lasso$beta    = coef(fit.lasso)[-1]
path.order        = lasso_order(fit.lasso$glmnet.fit)
univar.order      = order(abs(t(X) %*% y), decreasing = TRUE)
t.caisa           = system.time(
fit.caisa        <- varmixopt(X = X, y = y, sa2 = sa2, method = "update_g",
stepsize = 1, max.iter = 2000, standardize = standardize,
tol = list(epstol = 1e-12, convtol = 1e-8)))
beta.init         = fit.trendfilter$yhat[-1] - fit.trendfilter$yhat[-n]
t.caisa2          = system.time(
fit.caisa2       <- varmixopt(X = X, y = y, sa2 = sa2, method = "update_g",
stepsize = 1, max.iter = 2000, beta.init = beta.init, standardize = standardize,
tol = list(epstol = 1e-12, convtol = 1e-8)))
t.ridge           = system.time(
fit.ridge        <- cv.glmnet(x = X, y = y, alpha = 0, standardize = standardize))
fit.ridge$beta    = coef(fit.ridge)[-1]
t.enet = system.time(
fit.enet         <- cv.glmnet(x = X, y = y, alpha = 0.9, standardize = standardize))
fit.enet$beta     = coef(fit.enet)[-1]
t.blasso          = system.time(
fit.blasso       <- BGLR(y, ETA = list(list(X = X, model="BL", standardize = standardize)), verbose = FALSE))
fit.blasso$beta   = fit.blasso$ETA[[1]]$b
t.bayesB          = system.time(
fit.bayesB       <- BGLR(y, ETA = list(list(X = X, model="BayesB", standardize = standardize)), verbose = FALSE))
fit.bayesB$beta   = fit.blasso$ETA[[1]]$b * fit.bayesB$ETA[[1]]$d
t.varbvs          = system.time(
fit.varbvs       <- varbvs(X, Z = NULL, y, verbose = FALSE));
fit.varbvs$beta   = rowSums(fit.varbvs$alpha * fit.varbvs$mu)
t.L0Learn         = system.time(
fit.L0Learn      <- L0Learn.cvfit(X, y, nFolds=10))
lambda.min        = fit.L0Learn$fit$lambda[[1]][which.min(fit.L0Learn$cvMeans[[1]])]
pred2[i,] =  c("caisa"      = norm(y.test - predict.caisa(fit.caisa, X.test), '2'),
"caisa2"     = norm(y.test - predict.caisa(fit.caisa2, X.test), '2'),
"susie"      = norm(y.test - predict.susie(fit.susie, X.test), '2'),
"varbvs"     = norm(y.test - predict(fit.varbvs, X.test), '2'),
"L0Learn"    = norm(y.test - predict(fit.L0Learn, newx = X.test, lambda = lambda.min)@x, '2'),
"lasso"      = norm(y.test - predict.glmnet(fit.lasso$glmnet.fit, newx = X.test,
s = fit.lasso$lambda.1se), '2'),
"ridge"      = norm(y.test - predict.glmnet(fit.ridge$glmnet.fit, newx = X.test,
s = fit.ridge$lambda.1se), '2'),
"enet"       = norm(y.test - predict.glmnet(fit.enet$glmnet.fit, newx = X.test,
s = fit.enet$lambda.1se), '2'),
"blasso"     = norm(y.test - fit.blasso$yHat, '2'),
"bayesB"     = norm(y.test - fit.bayesB$yHat, '2'),
"bcp"        = norm(y.test - fit.bcp$yhat, '2'),
"binseg"     = norm(y.test - fit.binseg$yhat, '2'),
"flasso"     = norm(y.test - fit.trendfilter$yhat, '2'))
t2[i,] =     c("caisa"      = t.caisa[3],
"caisa2"      = t.caisa2[3],
"susie"      = t.susie[3],
"varbvs"     = t.varbvs[3],
"L0Learn"    = t.L0Learn[3],
"lasso"      = t.lasso[3],
"ridge"      = t.ridge[3],
"enet"       = t.enet[3],
"blasso"     = t.blasso[3],
"bayesB"     = t.bayesB[3],
"bcp"        = t.bcp[3],
"binseg"     = t.binseg[3],
"flasso"     = t.trendfilter[3])
cat(pred2[i,],"\n")
cat(t2[i,],"\n")
}
df.pred1 = data.frame("fit" = rep(c("CAISA","CAISA2","SUSIE","VARBVS","L0Learn","LASSO",
"RIDGE","E-NET","BLASSO","BayesB","BCP","BinSeg","FLASSO"), each = 20),
"pred" = c(pred1/pred1[,2]))
df.pred2 = data.frame("fit" = rep(c("CAISA","CAISA2","SUSIE","VARBVS","L0Learn","LASSO",
"RIDGE","E-NET","BLASSO","BayesB","BCP","BinSeg","FLASSO"), each = 20),
"pred" = c(pred2/pred2[,2]))
df.time1 = data.frame("fit" = rep(c("CAISA","CAISA2","SUSIE","VARBVS","L0Learn","LASSO",
"RIDGE","E-NET","BLASSO","BayesB","BCP","BinSeg","FLASSO"), each = 20),
"time" = c(t1/t1[,2]))
df.time2 = data.frame("fit" = rep(c("CAISA","CAISA2","SUSIE","VARBVS","L0Learn","LASSO",
"RIDGE","E-NET","BLASSO","BayesB","BCP","BinSeg","FLASSO"), each = 20),
"time" = c(t2/t2[,2]))
write.table(df.pred1, "~/git/caisar/output/Scenario3_pred1.txt", sep = ",")
write.table(df.pred2, "~/git/caisar/output/Scenario3_pred2.txt", sep = ",")
write.table(df.time1, "~/git/caisar/output/Scenario3_time1.txt", sep = ",")
write.table(df.time2, "~/git/caisar/output/Scenario3_time2.txt", sep = ",")
dat71 = read.table("dat71.txt", sep = ",")[c(1:20,41:200),]
dat72 = read.table("dat72.txt", sep = ",")[c(1:10,21:100),]
dat73 = read.table("dat73.txt", sep = ",")[c(1:10,21:100),]
dat71$pred = dat71$pred / dat71$pred[1:20]
dat72$pred = dat72$pred / dat72$pred[1:10]
dat73$pred = dat73$pred / dat73$pred[1:10]
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p72 = my.jitter(dat72,  "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SingleEffect", y = "") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p73 = my.jitter(dat73,  "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + Polygenic", y = "") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
fig7 = plot_grid(p71,p72,p73, nrow = 1, rel_widths = c(0.35,0.325,0.325))
ggsave("fig7.pdf", fig7, width = 18, height = 6)
fig7
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16,32), limits = c(0.5,32)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
min(dat71$pred)
max(dat71$pred)
dat71$pred
plot(dat71$pred)
pred1
## function for plot
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
geom_jitter(aes(color = fit, shape = fit)) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit, fill = fit), scale = "width") +
scale_alpha_manual(0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
l71
p71
## function for plot
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
#geom_jitter(aes(color = fit, shape = fit)) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit, fill = fit), scale = "width") +
scale_alpha_manual(0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
dat71 = read.table("dat71.txt", sep = ",")[c(1:20,41:200),]
p71
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0,40)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0,40)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
#geom_jitter(aes(color = fit, shape = fit)) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit, fill = fit), scale = "width") +
scale_alpha_manual(values = 0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
## function for plot
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
#geom_jitter(aes(color = fit, shape = fit)) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit, fill = fit), scale = "width") +
scale_alpha_manual(values = 0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
dat71 = read.table("dat71.txt", sep = ",")[c(1:20,41:200),]
dat71$pred = dat71$pred / dat71$pred[1:20]
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0,40)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.1,40)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
## function for plot
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
#geom_jitter(aes(color = fit, shape = fit)) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit, fill = fit)) +
scale_alpha_manual(values = 0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.1,40)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
#geom_jitter(aes(color = fit, shape = fit)) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit)) +
scale_alpha_manual(values = 0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.1,40)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
?geom_boxplot
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
geom_jitter(aes(color = fit, shape = fit), width = 0) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit)) +
scale_alpha_manual(values = 0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
dat71 = read.table("dat71.txt", sep = ",")[c(1:20,41:200),]
dat72 = read.table("dat72.txt", sep = ",")[c(1:10,21:100),]
dat73 = read.table("dat73.txt", sep = ",")[c(1:10,21:100),]
dat71$pred = dat71$pred / dat71$pred[1:20]
dat72$pred = dat72$pred / dat72$pred[1:10]
dat73$pred = dat73$pred / dat73$pred[1:10]
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
geom_jitter(aes(color = fit, shape = fit), width = 1) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit)) +
scale_alpha_manual(values = 0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
dat71 = read.table("dat71.txt", sep = ",")[c(1:20,41:200),]
dat72 = read.table("dat72.txt", sep = ",")[c(1:10,21:100),]
dat73 = read.table("dat73.txt", sep = ",")[c(1:10,21:100),]
dat71$pred = dat71$pred / dat71$pred[1:20]
dat72$pred = dat72$pred / dat72$pred[1:10]
dat73$pred = dat73$pred / dat73$pred[1:10]
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
geom_jitter(aes(color = fit, shape = fit), width = .1) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit)) +
scale_alpha_manual(values = 0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
dat71 = read.table("dat71.txt", sep = ",")[c(1:20,41:200),]
dat72 = read.table("dat72.txt", sep = ",")[c(1:10,21:100),]
dat73 = read.table("dat73.txt", sep = ",")[c(1:10,21:100),]
dat71$pred = dat71$pred / dat71$pred[1:20]
dat72$pred = dat72$pred / dat72$pred[1:10]
dat73$pred = dat73$pred / dat73$pred[1:10]
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
## function for plot
my.jitter <- function (dat, x, y,
values = c(1,2,0,3,4,5)) {
return(ggplot(dat,aes_string(x = x, y = y, fill = "fit")) +
geom_jitter(aes(color = fit, shape = fit), width = .1) +
scale_shape_manual(values = values) +
geom_boxplot(alpha = 0.1, aes(color = fit), outlier.alpha = 0) +
scale_alpha_manual(values = 0.1) +
scale_fill_discrete(guide = "none") +
labs(x           = "") +
theme_cowplot(font_size = 18))
}
dat71 = read.table("dat71.txt", sep = ",")[c(1:20,41:200),]
dat72 = read.table("dat72.txt", sep = ",")[c(1:10,21:100),]
dat73 = read.table("dat73.txt", sep = ",")[c(1:10,21:100),]
dat71$pred = dat71$pred / dat71$pred[1:20]
dat72$pred = dat72$pred / dat72$pred[1:10]
dat73$pred = dat73$pred / dat73$pred[1:10]
p71 = my.jitter(dat71, "fit", "pred", c(1,2,3,4,5,6,0,8,9)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(8)[3], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "EquiCorrGauss + SparseNormal",
y     = "relative variational objective") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p71
source('~/git/caisar/result/plots_for_paper.R', echo=TRUE)
source('~/git/caisar/result/plots_for_paper.R', echo=TRUE)
setwd("~/git/caisar/result")
dat92 = read.table("dat91.txt", sep = ",")
dat91 = read.table("dat92.txt", sep = ",")
dat92 = read.table("dat91.txt", sep = ",")[21:200,]
dat91 = read.table("dat92.txt", sep = ",")[21:200,]
p91 = my.box(dat91, "fit", "pred", c(1,2,3,4,5,6,0,8,9,10,11,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + BigSudden",
y     = "relative prediction error") +
scale_y_continuous(trans = "log10", breaks = c(0.2,0.5,1,2,5,10), limits = c(0.2,11)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p92 = my.box(dat92,  "fit", "pred", c(1,2,3,4,5,6,0,8,9,10,11,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + SmallFew", y = "") +
scale_y_continuous(trans = "log10", breaks = c(0.2,0.5,1,2,5,10), limits = c(0.2,11)) +
theme(axis.line    = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p91
dev.off()
p91
setwd("~/git/caisar/result")
dat92 = read.table("dat91.txt", sep = ",")[21:200,]
dat91 = read.table("dat92.txt", sep = ",")[21:200,]
p91 = my.box(dat91, "fit", "pred", c(1,2,3,4,5,6,0,8,9,10,11,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + BigSudden",
y     = "relative prediction error") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p92 = my.box(dat92,  "fit", "pred", c(1,2,3,4,5,6,0,8,9,10,11,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + SmallFew", y = "") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
dat91
setwd("~/git/caisar/result")
dat92 = read.table("dat91.txt", sep = ",")[21:260,]
dat91 = read.table("dat92.txt", sep = ",")[21:260,]
p91 = my.box(dat91, "fit", "pred", c(1,2,3,4,5,6,0,8,9,10,11,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + BigSudden",
y     = "relative prediction error") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p92 = my.box(dat92,  "fit", "pred", c(1,2,3,4,5,6,0,8,9,10,11,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + SmallFew", y = "") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
setwd("~/git/caisar/result")
dat91 = read.table("dat91.txt", sep = ",")[21:260,]
dat92 = read.table("dat92.txt", sep = ",")[21:260,]
p91 = my.box(dat91, "fit", "pred", c(1,2,3,4,5,6,0,8,9,10,11,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + BigSudden",
y     = "relative prediction error") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p92 = my.box(dat92,  "fit", "pred", c(1,2,3,4,5,6,0,8,9,10,11,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + SmallFew", y = "") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p91
setwd("~/git/caisar/result")
dat91 = read.table("dat91.txt", sep = ",")[21:260,]
dat92 = read.table("dat92.txt", sep = ",")[21:260,]
p91 = my.box(dat91, "fit", "pred", c(1,2,5,4,3,6,0,8,9,10,7,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + BigSudden",
y     = "relative prediction error") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p92 = my.box(dat92,  "fit", "pred", c(1,2,5,4,3,6,0,8,9,10,7,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + SmallFew", y = "") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p91
po2
p92
fig9 = plot_grid(p91,p92, nrow = 1)
ggsave("fig9.pdf", fig9, width = 18, height = 6)
setwd("~/git/caisar/result")
dat91 = read.table("dat91.txt", sep = ",")[21:260,]
dat92 = read.table("dat92.txt", sep = ",")[21:260,]
p91 = my.box(dat91, "fit", "pred", c(1,2,5,4,3,6,0,8,9,10,7,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + FewSmallChange",
y     = "relative prediction error") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
p92 = my.box(dat92,  "fit", "pred", c(1,2,5,4,3,6,0,8,9,10,7,12,13)) +
geom_abline(intercept = 0, slope = 0, color = gg_color_hue(7)[4], alpha = 0.8, linetype = 2, size = 0.2) +
labs(title = "Changepoint + BigSuddenChange", y = "") +
scale_y_continuous(trans = "log10", breaks = c(0.5,1,2,4,8,16), limits = c(0.5,20)) +
theme(axis.line    = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_text(angle = 45,hjust = 1),
legend.position = "none")
fig9 = plot_grid(p91,p92, nrow = 1)
ggsave("fig9.pdf", fig9, width = 18, height = 6)
